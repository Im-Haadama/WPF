Adding shortcodes
WP-F way:
1) Add the array:
    focus_main => array(__CLASS__ . '::main', capablity
2) Check if user has permission (capability)
function main()
{
    $function = $array[0];
    $capp = $array[1];
    if (! current_user_can($capp)) return "No permissions";
    $operation = get_param("operation");
    $atts = GetParam(array("operation"));
    call_user_func($function, $atts);
}

short codes
[focus_main] - my task, teams, I initiated.
[focus_task] - single task
[focus_repeating_task]
[focus_team]
[focus_project]
[focus_project_tasks]
[focus_salary]


Woocommenrce cart example:
1) in array add
                        'woocommerce_cart'           => __CLASS__ . '::cart',
2) check if data exists.
        public static function cart() {
                   return is_null( WC()->cart ) ? '' : self::shortcode_wrapper( array( 'WC_Shortcode_Cart', 'output' ) );
           }

3) shortcode wrapper (for all shortcodes
       public static function shortcode_wrapper(
                $function,
                $atts = array(),
                $wrapper = array(
                        'class'  => 'woocommerce',
                        'before' => null,
                        'after'  => null,
                )
        ) {
                ob_start();

                // @codingStandardsIgnoreStart
                echo empty( $wrapper['before'] ) ? '<div class="' . esc_attr( $wrapper['class'] ) . '">' : $wrapper['before'];
                call_user_func( $function, $atts );
                echo empty( $wrapper['after'] ) ? '</div>' : $wrapper['after'];
                // @codingStandardsIgnoreEnd

                return ob_get_clean();
        }

4) do the thing
     public static function output( $atts ) {
                if ( ! apply_filters( 'woocommerce_output_cart_shortcode_content', true ) ) {
                        return;
                }

                // Constants.
                wc_maybe_define_constant( 'WOOCOMMERCE_CART', true );

                $atts        = shortcode_atts( array(), $atts, 'woocommerce_cart' );
                $nonce_value = wc_get_var( $_REQUEST['woocommerce-shipping-calculator-nonce'], wc_get_var( $_REQUEST['_wpnonce'], '' ) ); // @codingStandardsIgnoreLine.

                // Update Shipping. Nonce check uses new value and old value (woocommerce-cart). @todo remove in 4.0.
                if ( ! empty( $_POST['calc_shipping'] ) && ( wp_verify_nonce( $nonce_value, 'woocommerce-shipping-calculator' ) || wp_verify_nonce( $nonce_value, 'woocommerce-cart' ) ) ) { // WPCS: input var ok.
                        self::calculate_shipping();

                        // Also calc totals before we check items so subtotals etc are up to date.
                        WC()->cart->calculate_totals();
                }

                // Check cart items are valid.
                do_action( 'woocommerce_check_cart_items' );

                // Calc totals.
                WC()->cart->calculate_totals();

                if ( WC()->cart->is_empty() ) {
                        wc_get_template( 'cart/cart-empty.php' );
                } else {
                        wc_get_template( 'cart/cart.php' );
                }
